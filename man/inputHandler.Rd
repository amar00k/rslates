% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/input_handlers.R
\name{inputHandler}
\alias{inputHandler}
\title{Define behaviour of an input type}
\usage{
inputHandler(
  default.value = "",
  params.list = list(),
  initInput = function(x) {     x },
  createUI = function(x, ns = identity, value = NULL) {     tags$div(id =
    session$ns(x$id)) },
  updateUI = function(x, session) { },
  setState = function(x, session, enabled, return.js = FALSE) {     if (class(x) ==
    "character")          id <- x     else id <- x$id     selector <- paste0("$(\\"#",
    session$ns(id), "\\")")     js <- paste0(selector, ".attr(\\"disabled\\",",
    jsBoolean(!enabled), ")") \%>\% print     if (return.js)          return(js)     else
    shinyjs::runjs(js) },
  setVisible = function(x, session, visible, tag.only = FALSE, return.js = FALSE) {    
    if (class(x) == "character")          id <- x     else id <- x$id     action <- if
    (visible)          "removeClass(\\"d-none\\")"     else "addClass(\\"d-none\\")"    
    if (tag.only)          selector <- paste0("$(\\"#", session$ns(id), "\\")")     else
    selector <- paste0("$(\\"#", session$ns(id), "\\").parent()")     js <-
    paste0(selector, ".", action, ";")     if (return.js)          return(js)     else
    shinyjs::runjs(js) },
  get.input = function(x, session) {     return(session$input[[x$id]]) },
  set.input = function(x, session, value) {     updateUI(x, session, value) },
  as.value = function(x, session = NULL, value = NULL) {     if (is.null(value))       
      value <- getHandler(x)$get.input(x, session)     value <- as.character(value)    
    if (length(value) > 1)          stop("input must have length 1.")     return(value) },
  as.string = function(x, session, value = NULL) {     getHandler(x)$as.value(x,
    session, value) \%>\% toString },
  as.source = function(x, session = NULL, value = NULL) {     getHandler(x)$as.value(x,
    session, value) \%>\% as.character },
  observer = function(x, session) { }
)
}
\arguments{
\item{default.value}{default value of this input type}

\item{params.list}{list of parameters used by the input type. Each element of the list
describes a parameter and has the following members: \code{name} (pretty name of
the parameter), type (one of \code{character}, \code{numeric}, \code{logical}, \code{choices}),
\code{choices} (when type is \code{choices}, the vector of allowed values), \code{default}
(default value).}

\item{createUI}{function used to create the input UI.}

\item{updateUI}{function used to update the input UI.}

\item{get.input}{function that returns the raw input(s) from the \code{session$input}
object as a \emph{list}.}

\item{as.value}{function that transforms the value from \code{get.input()}
to the appropriate format for the input type. If \code{value} is provided, then
the function tries to coerce this value to the appropriate type.}

\item{as.source}{function that transforms the value from \code{as.value()} to source code.}

\item{observer}{actions to be taken as an observer of any reactive expression(s).}
}
\value{
the list of functions to handle the the input type.
}
\description{
This function prepares a structure that defines all aspects of an
input type: UI creation, UI updating, observer function and string representation
of the input value.
}
\details{
The default functions assume a single input and return the value without
transformations \code{get.input()} returns a list of one element, \code{as.value} unlists
this element, and \code{as.source()} returns that value as a character value.
}
